Middleware checks if the http request has a policies to be perform or not...

Middleware is an intermediate layer between HTTP request and the action that will be executed(reaction). 
    eg. Laravel includes a middleware that verifies the user of your application is authenticated.
        If the user is not authenticated, the middleware will redirect the user to your application's login screen.
        However, if the user is authenticated, the middleware will allow the request to
        proceed further into the application.
    
There are three levels for the middleware: 
    1- Global: on all routes in the project.
    2- Grouped: on a specific group of routes(web routes/ api routes/ dashboard routes/ etc...).
    3- Specific Route: Middleware on a specific route.


If the request passes through all of the matched route's assigned middleware,
    the route or controller method will be executed
    and the response returned by the route or controller method will be sent back through the route's chain of middleware.

Once the route or controller method returns a response,
    the response will travel back outward through the route's middleware,
    giving the application a chance to modify or examine the outgoing response.

Finally, once the response travels back through the middleware,
    the HTTP kernel's handle method returns the response object and the index.php file calls the send method on the returned response.
    The send method sends the response content to the user's web browser.
    We've finished our journey through the entire Laravel request lifecycle!